#include "Math.h"
#include "Linear_Regression.h"
#include "matplotlibcpp.h"

namespace plt = matplotlibcpp;
// CALCULATE THE COEFFICIENTS
template <typename T , typename M>
void estimate_coef(std::vector<T> indep_var,std::vector<T> dep_var ,M &B_1 ,M &B_0 )
{
    M X_mean = alg_math::Math_Mean(indep_var);
    M Y_mean = alg_math::Math_Mean(dep_var);
    M SS_xy = 0;
    M SS_xx = 0;
    int n = indep_var.size();
    {
        std::vector<T> temp;
        temp  = alg_math::vect_Multiply(indep_var, dep_var);
        SS_xy = std::accumulate(temp.begin(), temp.end(), 0);
        SS_xy = SS_xy - n * X_mean * Y_mean;
    }
    {
        std::vector<T> temp;
        temp = alg_math::vect_Multiply(indep_var, indep_var);
        SS_xx = std::accumulate(temp.begin(), temp.end(), 0);
        SS_xx = SS_xx - n * X_mean * X_mean;
    }
    std::cout<< "SS_xy : " << SS_xy <<std::endl;
    std::cout<< "SS_xx : " << SS_xx <<std::endl;
    std::cout<< "X_mean : " << X_mean <<std::endl;
    std::cout<< "Y_mean : " << Y_mean <<std::endl;
    B_1 =  SS_xy / SS_xx;
    B_0 =  Y_mean - B_1 * X_mean ;
}
//IMPLEMENTING THE CLASS
template <typename X, typename Z>
class Linear_Regression
{
    private:
    X b_0;
    X b_1;
    
    public:
    void fit(std::vector<std::vector<Z>> dataset)
    {
        estimate_coef(dataset[0],dataset[1] ,b_1 ,b_0 );
    }
    Z predict(const Z & test_data)
    {
        return b_0 + (b_1 * test_data); 
    }
};
//EXAMPLE
int main(){
    
    std::vector<float> X {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    std::vector<float> Y {1, 3, 2, 5, 7, 8, 8, 9, 10, 12};
    float B_1;
    float B_0;
    std::vector<std::vector<float>> Z(10);
    Z[0] = X;
    Z[1] = Y;

    Linear_Regression <float,float> Reg_Class;
    Reg_Class.fit(Z);
    std::cout<<"\n";
    std::cout<< "Estimated Coefficients:\nb_0 = { "<< Reg_Class.b_0 << " }  \
          \nb_1 = { "<< Reg_Class.b_1 <<" }" <<std::endl;
    
    plt::plot(X,Y,{ {"label", "Original Data"}});
    
    std::vector<float> predicted;
    for (int i =0; i< X.size(); i++)
    {
        predicted.push_back(Reg_Class.predict(X[i]));
    }
    
    plt::plot(X,predicted,{ {"label", "Predicted Data"}});
    plt::title("Linear Regression");
    plt::legend();
    plt::show();
    return 0;
}
